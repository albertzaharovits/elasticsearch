/*
 * Licensed to Elasticsearch under one or more contributor
 * license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright
 * ownership. Elasticsearch licenses this file to you under
 * the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.elasticsearch.gradle.test.AntFixture
import java.security.KeyPair
import java.security.KeyPairGenerator


esplugin {
  description 'The GCS repository plugin adds Google Cloud Storage support for repositories.'
  classname 'org.elasticsearch.repositories.gcs.GoogleCloudStoragePlugin'
}

dependencies {
  compile 'com.google.cloud:google-cloud-storage:1.26.0'
  compile 'com.google.cloud:google-cloud-core:1.26.0'
  compile 'com.google.cloud:google-cloud-core-http:1.26.0'
  compile 'com.google.auth:google-auth-library-oauth2-http:0.9.0'
  compile 'com.google.auth:google-auth-library-credentials:0.9.0'
  compile 'com.google.oauth-client:google-oauth-client:1.23.0'
  compile 'com.google.http-client:google-http-client:1.23.0'
  compile 'com.google.http-client:google-http-client-jackson:1.23.0'
  compile 'com.google.http-client:google-http-client-jackson2:1.23.0'
  compile 'com.google.http-client:google-http-client-appengine:1.23.0'
  compile 'com.google.api-client:google-api-client:1.23.0'
  compile 'com.google.api:gax:1.23.0'
  compile 'com.google.api:gax-httpjson:0.40.0'
  compile 'com.google.api:api-common:1.5.0'
  compile 'com.google.api.grpc:proto-google-common-protos:1.8.0'
  compile 'com.google.guava:guava:20.0'
  compile 'com.google.apis:google-api-services-storage:v1-rev115-1.23.0'
  compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
  compile 'io.grpc:grpc-context:1.9.0'
  compile 'io.opencensus:opencensus-api:0.11.1'
  compile 'io.opencensus:opencensus-api:0.11.1'
  compile 'io.opencensus:opencensus-contrib-http-util:0.11.1'
  compile 'org.threeten:threetenbp:1.3.6'
}

dependencyLicenses {
  mapping from: /google-cloud-.*/, to: 'google-cloud'
  mapping from: /google-auth-.*/, to: 'google-auth'
  mapping from: /google-http-.*/, to: 'google-http'
  mapping from: /opencensus.*/, to: 'opencensus'
}

thirdPartyAudit.excludes = [
        // classes are missing
        //'com.google.appengine.api'
        //'com.google.common.base.Splitter',
        //'com.google.common.collect.Lists',
        //'javax.servlet.ServletContextEvent',
        //'javax.servlet.ServletContextListener',
        //'org.apache.avalon.framework.logger.Logger',
        //'org.apache.log.Hierarchy',
        //'org.apache.log.Logger',
]

forbiddenApisTest {
  // we are using jdk-internal instead of jdk-non-portable to allow for com.sun.net.httpserver.* usage
  bundledSignatures -= 'jdk-non-portable'
  bundledSignatures += 'jdk-internal'
}

/** A task to start the GoogleCloudStorageFixture which emulates a Google Cloud Storage service **/
task googleCloudStorageFixture(type: AntFixture) {
    dependsOn compileTestJava
    env 'CLASSPATH', "${ -> project.sourceSets.test.runtimeClasspath.asPath }"
    env 'ES_JAVA_OPTS', "-Djava.security.debug=access,failure"
    executable = new File(project.runtimeJavaHome, 'bin/java')
    args 'org.elasticsearch.repositories.gcs.GoogleCloudStorageFixture', baseDir, 'bucket_test'
}

/** A service account file that points to the Google Cloud Storage service emulated by the fixture **/
File serviceAccountFile = new File(project.buildDir, "generated-resources/service_account_test.json")
task createServiceAccountFile() {
  dependsOn googleCloudStorageFixture
  doLast {
    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA")
    keyPairGenerator.initialize(1024)
    KeyPair keyPair = keyPairGenerator.generateKeyPair()
    String encodedKey = Base64.getEncoder().encodeToString(keyPair.private.getEncoded())

    serviceAccountFile.parentFile.mkdirs()
    serviceAccountFile.setText("{\n" +
            '  "type": "service_account",\n' +
            '  "project_id": "integration_test",\n' +
            '  "private_key_id": "' + UUID.randomUUID().toString() + '",\n' +
            '  "private_key": "-----BEGIN PRIVATE KEY-----\\n' + encodedKey + '\\n-----END PRIVATE KEY-----\\n",\n' +
            '  "client_email": "integration_test@appspot.gserviceaccount.com",\n' +
            '  "client_id": "123456789101112130594",\n' +
            "  \"auth_uri\": \"http://${googleCloudStorageFixture.addressAndPort}/o/oauth2/auth\",\n" +
            "  \"token_uri\": \"http://${googleCloudStorageFixture.addressAndPort}/o/oauth2/token\",\n" +
            '  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",\n' +
            '  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/integration_test%40appspot.gserviceaccount.com"\n' +
            '}', 'UTF-8')
  }
}

integTestCluster {
  dependsOn createServiceAccountFile, googleCloudStorageFixture
  keystoreFile 'gcs.client.integration_test.credentials_file', "${serviceAccountFile.absolutePath}"

  /* Use a closure on the string to delay evaluation until tests are executed */
  setting 'gcs.client.integration_test.host', "http://${ -> googleCloudStorageFixture.addressAndPort }"
}
